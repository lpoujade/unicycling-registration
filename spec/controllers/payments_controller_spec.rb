require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PaymentsController do
  before(:each) do
    @user = FactoryGirl.create(:user)
    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Payment. As you add validations to Payment, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :completed => false,
      :cancelled => false,
      :transaction_id => nil,
      :completed_date => Date.new(2012, 01, 30)
    }
  end

  describe "POST fake_complete" do
    it "sets the payment as completed" do
      payment = FactoryGirl.create(:payment, :user => @user)
      post :fake_complete, {:id => payment.to_param}
      payment.reload
      payment.completed.should == true
    end
    it "redirects to registrants page" do
      payment = FactoryGirl.create(:payment, :user => @user)
      post :fake_complete, {:id => payment.to_param}
      response.should redirect_to registrants_path
    end
    it "cannot change if config test_mode is disabled" do
      FactoryGirl.create(:event_configuration, :test_mode => false)
      payment = FactoryGirl.create(:payment, :user => @user)
      post :fake_complete, {:id => payment.to_param}
      payment.reload
      payment.completed.should == false
    end
  end
  describe "GET index" do
    it "assigns all payments as @payments" do
      payment = FactoryGirl.create(:payment, :user => @user)
      get :index, {}
      assigns(:payments).should eq([payment])
    end
  end

  describe "GET show" do
    it "assigns the requested payment as @payment" do
      payment = FactoryGirl.create(:payment, :user => @user)
      get :show, {:id => payment.to_param}
      assigns(:payment).should eq(payment)
    end
  end

  describe "GET new" do
    it "assigns a new payment as @payment" do
      get :new, {}
      assigns(:payment).should be_a_new(Payment)
      assigns(:payment).payment_details.should == []
    end

    describe "for a user with a registrant owing money" do
      before(:each) do
        @reg = FactoryGirl.create(:competitor, :user => @user)
        @reg_period = FactoryGirl.create(:registration_period, :competitor_cost => 200)
      end
      it "assigns a new payment_detail for the registrant" do
        get :new, {}
        pd = assigns(:payment).payment_details.first
        pd.registrant.should == @reg
      end
      it "sets the amount to the owing amount" do
        @user.registrants.count.should == 1
        get :new, {}
        pd = assigns(:payment).payment_details.first
        pd.amount.should == 200
      end
    end
  end

  describe "GET edit" do
    it "assigns the requested payment as @payment" do
      payment = FactoryGirl.create(:payment, :user => @user)
      get :edit, {:id => payment.to_param}
      assigns(:payment).should eq(payment)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Payment" do
        expect {
          post :create, {:payment => valid_attributes}
        }.to change(Payment, :count).by(1)
      end

      it "assigns a newly created payment as @payment" do
        post :create, {:payment => valid_attributes}
        assigns(:payment).should be_a(Payment)
        assigns(:payment).should be_persisted
      end

      it "redirects to the created payment" do
        post :create, {:payment => valid_attributes}
        response.should redirect_to(Payment.last)
      end
      it" assigns the logged in user" do
        post :create, {:payment => valid_attributes}
        Payment.last.user.should == @user
      end
      describe "with nested attributes for payment_details" do
        it "creates the payment_detail" do
          post :create, {:payment => {
            :payment_details_attributes => [
              {
                :registrant_id => 1,
                :amount => 100
             }]
          }}
          PaymentDetail.count.should == 1
        end
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved payment as @payment" do
        # Trigger the behavior that occurs when invalid params are submitted
        Payment.any_instance.stub(:save).and_return(false)
        post :create, {:payment => {}}
        assigns(:payment).should be_a_new(Payment)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Payment.any_instance.stub(:save).and_return(false)
        post :create, {:payment => {}}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested payment" do
        payment = FactoryGirl.create(:payment, :user => @user)
        # Assuming there are no other payments in the database, this
        # specifies that the Payment created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Payment.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => payment.to_param, :payment => {'these' => 'params'}}
      end

      it "assigns the requested payment as @payment" do
        payment = FactoryGirl.create(:payment, :user => @user)
        put :update, {:id => payment.to_param, :payment => valid_attributes}
        assigns(:payment).should eq(payment)
      end

      it "redirects to the payment" do
        payment = FactoryGirl.create(:payment, :user => @user)
        put :update, {:id => payment.to_param, :payment => valid_attributes}
        response.should redirect_to(payment)
      end
    end

    describe "with invalid params" do
      it "assigns the payment as @payment" do
        payment = FactoryGirl.create(:payment, :user => @user)
        # Trigger the behavior that occurs when invalid params are submitted
        Payment.any_instance.stub(:save).and_return(false)
        put :update, {:id => payment.to_param, :payment => {}}
        assigns(:payment).should eq(payment)
      end

      it "re-renders the 'edit' template" do
        payment = FactoryGirl.create(:payment, :user => @user)
        # Trigger the behavior that occurs when invalid params are submitted
        Payment.any_instance.stub(:save).and_return(false)
        put :update, {:id => payment.to_param, :payment => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested payment" do
      payment = FactoryGirl.create(:payment, :user => @user)
      expect {
        delete :destroy, {:id => payment.to_param}
      }.to change(Payment, :count).by(-1)
    end

    it "redirects to the payments list" do
      payment = FactoryGirl.create(:payment, :user => @user)
      delete :destroy, {:id => payment.to_param}
      response.should redirect_to(payments_url)
    end
  end

end
