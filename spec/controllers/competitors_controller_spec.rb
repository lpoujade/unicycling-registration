require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CompetitorsController do
  before(:each) do
    @ev = FactoryGirl.create(:event)
    @ec = FactoryGirl.create(:competition, :event => @ev)
    @event_category = @ev.event_categories.first
    @ec.event_category = @event_category
    @ec.save!
    sign_in FactoryGirl.create(:admin_user)
  end

  # This should return the minimal set of attributes required to create a valid
  # Competitor. As you add validations to Competitor, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { position: 1}
  end
  
  describe "GET index" do
    it "assigns all competitors as @competitors" do
      competitor = FactoryGirl.create(:event_competitor, :competition => @ec)
      get :index, {:competition_id => @ec.id}
      assigns(:competitors).should == [competitor]
    end
  end

  describe "GET edit" do
    it "assigns the requested competitor as @competitor" do
      competitor = FactoryGirl.create(:event_competitor, :competition => @ec)
      get :edit, {:id => competitor.to_param}
      assigns(:competitor).should eq(competitor)
    end
  end
  describe "GET new" do
    it "assigns a new competitor as @competitor" do
      get :new, {:competition_id => @ec.to_param}
      assigns(:competitor).should be_a_new(Competitor)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Competitor" do
        expect {
          post :create, {:competitor => valid_attributes, :competition_id => @ec.id}
        }.to change(Competitor, :count).by(1)
      end

      it "assigns a newly created competitor as @competitor" do
        post :create, {:competitor => valid_attributes, :competition_id => @ec.id}
        assigns(:competitor).should be_a(Competitor)
        assigns(:competitor).should be_persisted
      end

      it "creates associated members also" do
        @reg2 = FactoryGirl.create(:competitor) #registrant
        @reg3 = FactoryGirl.create(:competitor) #registrant
        expect {
          post :create, {:competitor => valid_attributes.merge({:registrant_ids => [@reg2.id, @reg3.id]}), :competition_id => @ec.id}
        }.to change(Member, :count).by(2)
      end

      it "redirects back to index" do
        post :create, {:competitor => valid_attributes, :competition_id => @ec.id}
        response.should redirect_to(competition_competitors_path(@ec))
      end
      it "can create with custom external id and name" do
        expect {
          post :create, {:competitor => valid_attributes.merge({custom_external_id: 101, custom_name: 'Robin Rocks!'}), :competition_id => @ec.id}
        }.to change(Competitor, :count).by(1)
      end
    end

    describe "add_all adds all registrants" do
        before(:each) do
            FactoryGirl.create(:registrant, :bib_number => 1)
            FactoryGirl.create(:registrant, :bib_number => 2)
            FactoryGirl.create(:registrant, :bib_number => 3, :competitor => false)
            @attributes = { }
        end
        it "should create a competitor for every registrant" do
            expect {
              post :add_all, {:competitor => @attributes, :competition_id => @ec.id}
            }.to change(Competitor, :count).by(2)
        end
        it "should not create any new competitors if we run it twice" do
            post :add_all, {:competitor => @attributes, :competition_id => @ec.id}

            expect {
              post :add_all, {:competitor => @attributes, :competition_id => @ec.id}
            }.to change(Competitor, :count).by(0)
        end

        describe "when adding multiple non-contiguous external_id registrants" do
          it "should add them with continuous position numbers" do
            FactoryGirl.create(:registrant, :bib_number => 9)
            FactoryGirl.create(:registrant, :bib_number => 8)
            FactoryGirl.create(:registrant, :bib_number => 7)
            FactoryGirl.create(:registrant, :bib_number => 6)
            FactoryGirl.create(:registrant, :bib_number => 5)
            expect {
              post :add_all, {:competitor => @attributes, :competition_id => @ec.id}
            }.to change(Competitor, :count).by(7)

            @ec.competitors.each_with_index do |c, i|
                c.position.should == (i + 1)
            end
          end
        end
    end
    describe "with the 'destroy_all' field" do
        before(:each) do
            FactoryGirl.create(:event_competitor, :competition => @ec)
            FactoryGirl.create(:event_competitor, :competition => @ec)
            FactoryGirl.create(:event_competitor, :competition => @ec)
        end
        it "should remove all competitors in this event" do
            expect {
                delete :destroy_all, {:competition_id => @ec.to_param}
            }.to change(Competitor, :count).by(-3)
        end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved competitor as @competitor" do
        # Trigger the behavior that occurs when invalid params are submitted
        Competitor.any_instance.stub(:save).and_return(false)
        post :create, {:competitor => {:custom_name => "name"}, :competition_id => @ec.id}
        assigns(:competitor).should be_a_new(Competitor)
      end

      it "re-renders the 'competitors#new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Competitor.any_instance.stub(:save).and_return(false)
        post :create, {:competitor => {:custom_name => "name"}, :competition_id => @ec.id}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested competitor" do
        competitor = FactoryGirl.create(:event_competitor, :competition => @ec)
        # Assuming there are no other competitor in the database, this
        # specifies that the Competitor created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Competitor.any_instance.should_receive(:update_attributes).with({})
        put :update, {:id => competitor.to_param, :competitor => {'these' => 'params'}}
      end

      it "assigns the requested competitor as @competitor" do
        competitor = FactoryGirl.create(:event_competitor, :competition => @ec)
        put :update, {:id => competitor.to_param, :competitor => valid_attributes}
        assigns(:competitor).should eq(competitor)
      end

      it "redirects to the competition" do
        competitor = FactoryGirl.create(:event_competitor, :competition => @ec)
        put :update, {:id => competitor.to_param, :competitor => valid_attributes}
        response.should redirect_to(competition_competitors_path(competitor.competition))
      end
    end

    describe "with invalid params" do
      it "assigns the competitor as @competitor" do
        competitor = FactoryGirl.create(:event_competitor, :competition => @ec)
        # Trigger the behavior that occurs when invalid params are submitted
        Competitor.any_instance.stub(:save).and_return(false)
        put :update, {:id => competitor.to_param, :competitor => {:custom_name => "name"}}
        assigns(:competitor).should eq(competitor)
      end

      it "re-renders the 'events#edit' template" do
        competitor = FactoryGirl.create(:event_competitor, :competition => @ec)
        # Trigger the behavior that occurs when invalid params are submitted
        Competitor.any_instance.stub(:save).and_return(false)
        put :update, {:id => competitor.to_param, :competitor => {:custom_name => "name"}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested competitor" do
      competitor = FactoryGirl.create(:event_competitor, :competition => @ec)
      expect {
        delete :destroy, {:id => competitor.to_param}
      }.to change(Competitor, :count).by(-1)
    end

    it "redirects to the competitor#new page" do
      competitor = FactoryGirl.create(:event_competitor, :competition => @ec)
      delete :destroy, {:id => competitor.to_param}
      response.should redirect_to(competition_competitors_path(@ec))
    end
  end

  describe "file upload" do
    before(:each) do
        @reg1 = FactoryGirl.create(:registrant, :bib_number => 1)
        @reg2 = FactoryGirl.create(:registrant, :bib_number => 22)
        @reg3 = FactoryGirl.create(:registrant, :bib_number => 36)
        @reg4 = FactoryGirl.create(:registrant, :bib_number => 77)

        @reg5 = FactoryGirl.create(:registrant, :bib_number => 3)
        @reg6 = FactoryGirl.create(:registrant, :bib_number => 23)
        @reg7 = FactoryGirl.create(:registrant, :bib_number => 37)
        @reg8 = FactoryGirl.create(:registrant, :bib_number => 78)
    end
    it "sets the registratns for High/Long-style files" do
        test_image = fixture_path + '/sample_highjump.txt'
        sample_input = Rack::Test::UploadedFile.new(test_image, "text/plain")

        post :upload, {:competition_id => @ec.id, :import => {:file => sample_input}}

        Competitor.count.should == 4
        @reg1.competitors.count.should == 1
        @reg2.competitors.count.should == 1
        @reg3.competitors.count.should == 1
        @reg4.competitors.count.should == 1
    end
    it "sets the registrants for INDIVIDUAL" do
        test_image = fixture_path + '/sample_individual_freestyle.txt'
        sample_input = Rack::Test::UploadedFile.new(test_image, "text/plain")

        post :upload, {:competition_id => @ec.id, :import => {:file => sample_input}}

        Competitor.count.should == 4
        @reg1.competitors.count.should == 1
        @reg2.competitors.count.should == 1
        @reg3.competitors.count.should == 1
        @reg4.competitors.count.should == 1
    end
    it "sets the registrants for PAIRS" do
        test_image = fixture_path + '/sample_pairs_freestyle.txt'
        sample_input = Rack::Test::UploadedFile.new(test_image, "text/plain")

        post :upload, {:competition_id => @ec.id, :import => {:file => sample_input}}

        Competitor.count.should == 4
        @reg1.competitors.count.should == 1
        @reg2.competitors.count.should == 1
        @reg3.competitors.count.should == 1
        @reg4.competitors.count.should == 1
        @reg5.competitors.count.should == 1
        @reg6.competitors.count.should == 1
        @reg7.competitors.count.should == 1
        @reg8.competitors.count.should == 1
    end
    it "sets the registrants for Group" do
        test_image = fixture_path + '/sample_group_freestyle.txt'
        sample_input = Rack::Test::UploadedFile.new(test_image, "text/plain")

        post :upload, {:competition_id => @ec.id, :import => {:file => sample_input}}

        Competitor.count.should == 5
        c1 = Competitor.where({:custom_name => "CIRK-oN-CyCle"}).first
        c1.export_id.should == 3023
        c1.name.should == "CIRK-oN-CyCle"
    end
  end

  #describe "creates competitors from sign_ups" do
    #before(:each) do
      #@reg = FactoryGirl.create(:registrant)
      #FactoryGirl.create(:registrant_event_sign_up, :event => @ev, :event_category => @ev.event_categories.first, :signed_up => true, :registrant => @reg)
    #end
    #it "creates a competitor for the given registrant" do
      #post :create_from_sign_ups, {:event_category_id => @ec.id}
      #@ec.reload
      #@ec.competitors.count.should == 1
      #@ec.competitors.first.members.first.registrant.should == @reg
    #end
  #end
end
