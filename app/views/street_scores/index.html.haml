%h1 Event: #{@competition.name} - Street Scores
%h2 Judge: #{@judge}

- if !policy(@judge).create_scores?
  %p.event_locked Scores for this event are now locked (closed)

%hr.competitor_separator

.row
  .small-12.medium-6.columns
    #current_ranks
      = render "current_ranks", judge: @judge, competitors: @competitors, street_scores: @street_scores

  .small-12.medium-6.columns
    - if policy(@judge).create_scores?
      %table.top_distance_attempts
        %thead
          %tr
            %th Order
            %th ID
            %th Competitor
            %th Rank
        %tbody.competitor_statuses
          - @competitors.each do |competitor|
            - competitor_score = @street_scores.select{ |s| s.competitor == competitor}.first.try(:val_1)
            - next if competitor_score
            %tr{ id: "row_#{competitor.id}", :class => competitor.status == "active" ? "active" : "not_active" }
              %th= competitor.position
              %td= competitor.bib_number
              %td= competitor.to_s
              %td
                = form_tag(set_rank_judge_street_scores_path(@judge), class: "no_dirty_check", remote: true, data: { competitor: competitor.id }) do
                  = hidden_field_tag :competitor_id, competitor.id
                  = number_field_tag :rank, competitor_score, min: 0, max: @judge.judge_type.val_1_max
                  = submit_tag "Rank"

- unless @street_scores.empty?
  %table.top_distance_attempts
    %caption Street Scores
    %thead
      %tr
        %th ID
        %th Competitor
        %th Entered Place
        %th.derived Judged Place
        %th.derived Judged Points
        %th
    %tbody
      - @street_scores.each do |ss|
        - next if ss.new_record?
        %tr
          %td= ss.competitor.bib_number
          %td= ss.competitor.name
          %td= ss.val_1
          %td.derived= ss.judged_place
          %td.derived= ss.placing_points
          %td
            - if policy(ss).destroy?
              = link_to t("delete"), judge_street_score_path(@judge, ss), data: { confirm: t("are_you_sure") }, method: :delete
